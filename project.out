SQL> /*
SQL> CIS 353 - Database Design Project
SQL> <One line per team member name>
SQL> */
SQL> DROP TABLE Subscription CASCADE CONSTRAINTS;

Table dropped.

SQL> DROP TABLE UserProfile CASCADE CONSTRAINTS;

Table dropped.

SQL> DROP TABLE Episode CASCADE CONSTRAINTS;

Table dropped.

SQL> DROP TABLE Show CASCADE CONSTRAINTS;

Table dropped.

SQL> DROP TABLE WorkHistory CASCADE CONSTRAINTS;

Table dropped.

SQL> DROP TABLE Cast CASCADE CONSTRAINTS;

Table dropped.

SQL> DROP TABLE Genre CASCADE CONSTRAINTS;

Table dropped.

SQL> DROP TABLE Watches CASCADE CONSTRAINTS;

Table dropped.

SQL> 
SQL> --< The SQL/DDL code that creates your schema >
SQL> CREATE TABLE Subscription(
  2  	 accountID	 INTEGER,
  3  	 email		 CHAR(25)    NOT NULL,
  4  	 nextBillDate	 DATE	     NOT NULL,
  5  	 lastBillDate	 DATE	     NOT NULL,
  6  	 paymentMethod	 CHAR(10)    NOT NULL,
  7  	 managerID	 INTEGER     NOT NULL
  8  );

Table created.

SQL> 
SQL> CREATE TABLE UserProfile(
  2  	 userID 	 INTEGER,
  3  	 userName	 CHAR(10)   NOT NULL,
  4  	 accountID	 INTEGER    NOT NULL
  5  );

Table created.

SQL> 
SQL> CREATE TABLE Episode(
  2  	 showID 	 INTEGER,
  3  	 epNum		 INTEGER,
  4  	 epName 	 CHAR(40)    NOT NULL,
  5  	 duration	 TIMESTAMP   NOT NULL,
  6  	 season 	 INTEGER     NOT NULL,
  7  	 views		 INTEGER     NOT NULL,
  8  	 synopsis	 CHAR(300)
  9  );

Table created.

SQL> 
SQL> CREATE TABLE Show (
  2  	 showID 	 INTEGER,
  3  	 showTitle	 CHAR(30)    NOT NULL,
  4  	 maturity	 CHAR(5)     NOT NULL
  5  );

Table created.

SQL> 
SQL> CREATE TABLE WorkHistory (
  2  	 showID 	 INTEGER,
  3  	 castID 	 INTEGER,
  4  	 role		 CHAR(15),
  5  	 startDate	 DATE	     NOT NULL,
  6  	 endDate	 DATE	     NOT NULL
  7  );

Table created.

SQL> 
SQL> CREATE TABLE Cast (
  2  	 castID 	 INTEGER,
  3  	 castName	 CHAR(30)    NOT NULL
  4  );

Table created.

SQL> 
SQL> CREATE TABLE Genre (
  2  	 showID 	 INTEGER,
  3  	 genreName	     CHAR(15)
  4  );

Table created.

SQL> 
SQL> CREATE TABLE Watches (
  2  	 userID 	 INTEGER,
  3  	 showID 	 INTEGER,
  4  	 epNum		 INTEGER,
  5  	 timestamp	 TIMESTAMP    NOT NULL
  6  );

Table created.

SQL> 
SQL> 
SQL> SET FEEDBACK OFF
SQL> --< The INSERT statements that populate the tables>
SQL> 
SQL> INSERT INTO Show VALUES (743756, 'Sherlock', 'TV-14');
SQL> INSERT INTO Show VALUES (481516, 'Lost', 'TV-14');
SQL> INSERT INTO Show VALUES (123456, 'Fargo', 'TV-14');
SQL> 
SQL> 
SQL> INSERT INTO Episode VALUES (743756, 101, 'A Study in Pink',
  2  				 TO_TIMESTAMP('01:28:18','hh24:mi:ss'), 1, 457887,
  3  				 'A string of apparent suicides has Scotland Yard baffled in London 2010,
  4  				 and officials turn to their consultant, Sherlock Holmes, for assistance.');
SQL> INSERT INTO Episode VALUES (743756, 102, 'The Blind Banker', TO_TIMESTAMP('01:28:24','hh24:mi:ss'), 1, 876568,
  2  				 'Holmes plunges into a world of codes and symbols when he investigates
  3  				 a series of murders linked to a mysterious cipher.');
SQL> INSERT INTO Episode VALUES (743756, 103, 'The Great Game', TO_TIMESTAMP('01:29:14','hh24:mi:ss'), 1, 346588,
  2  				 'Sherlock and John plunge into a battle of wits with
  3  				 a shadowy stranger when faced with a unusual clue in an empty room.');
SQL> INSERT INTO Episode VALUES (743756, 201, 'The Scandal in Belgravia', TO_TIMESTAMP('01:29:47','hh24:mi:ss'), 2, 435786,
  2  				 'Sherlock and John discover that a case of
  3  				 blackmail is more than just a threat to topple the monarchy.');
SQL> INSERT INTO Episode VALUES (743756, 202, 'The Hounds of Baskerville', TO_TIMESTAMP('01:28:36','hh24:mi:ss'), 2, 876807,
  2  				 'Sherlock and John investigate for their client,
  3  				  who saw his father killed by a monstrous creature on Dartmoor 20 years earlier.');
SQL> INSERT INTO Episode VALUES (743756, 203, 'The Reichenbach Fall', TO_TIMESTAMP('01:28:02','hh24:mi:ss'), 2, 2365457,
  2  				 'A whirlwind adventure and the return of
  3  				 arch-nemesis Moriarty lead John to believe that Sherlock is dead.');
SQL> INSERT INTO Episode VALUES (481516, 101, 'Pilot(Part 1)', TO_TIMESTAMP('00:48:32','hh24:mi:ss'), 1, 10312543,
  2  				 'Forty-eight survivors crash-land onto an unknown
  3  				 island 1000 miles off course, struggle to figure out a way to survive.');
SQL> INSERT INTO Episode VALUES (481516, 102, 'Pilot(Part 2)', TO_TIMESTAMP('00:44:24','hh24:mi:ss'), 1, 10023432,
  2  				 'Having retrieved the plane tranceiver, a group of survivors try to transmit
  3  				 a signal, only to receive a strange transmission from another inhabitant.');
SQL> INSERT INTO Episode VALUES (481516, 201, 'Man of Science, Man of Faith', TO_TIMESTAMP('00:47:32','hh24:mi:ss'), 2, 10343264,
  2  				 'One of the castaways is chosen to descend into the mysterious hatch, and Shannon stumbles
  3  				  upon a shockingly familiar face in the jungle.');
SQL> INSERT INTO Episode VALUES (481516, 202, 'Adrift', TO_TIMESTAMP('00:47:14','hh24:mi:ss'), 2, 9803243,
  2  				 'Michael and Sawyer fight for their lives on the high seas and discover
  3  				 a new threat. Locke descends into the hatch to find a missing Kate.');
SQL> INSERT INTO Episode VALUES (123456, 101, 'The Crocodiles Dilemma', TO_TIMESTAMP('01:10:35','hh24:mi:ss'), 1, 15889244,
  2  				 'A manipulative man meets a small town insurance salesman and sets him on a path of destruction.');
SQL> INSERT INTO Episode VALUES (123456, 102, 'The Rooster Prince', TO_TIMESTAMP('00:51:54','hh24:mi:ss'), 1, 15889238,
  2  				 'Molly begins to suspect that Lester is involved with the murders.');
SQL> INSERT INTO Episode VALUES (123456, 201, 'Waiting For Dutch', TO_TIMESTAMP('00:50:51','hh24:mi:ss'), 2, 15888945,
  2  				 'In 1979, a turn of events at a diner disrupts the lives of the citizens in a small Minnesota town.');
SQL> INSERT INTO Episode VALUES (123456, 202, 'Before the Law', TO_TIMESTAMP('00:59:32','hh24:mi:ss'), 2, 14665795,
  2  				 'The Gerhardts get a surprising offer, and two murderers do their best to clean up their mess.');
SQL> 
SQL> SET FEEDBACK ON
SQL> COMMIT;

Commit complete.

SQL> --
SQL> --< One query (per table) of the form: SELECT * FROM table; in order to print out your
SQL> --database >
SQL> --
SQL> --< The SQL queries>. Include the following for each query:
SQL> --
SQL> --< The insert/delete/update statements to test the enforcement of ICs >
SQL> COMMIT;

Commit complete.

SQL> --
SQL> SPOOL OFF
